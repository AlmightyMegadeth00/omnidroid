#labels Phase-Design
General Design Overview for OmniDroid

= ARCHITECTURE =

OmniDroid presents a simple event handler system.  OmniDroid processes data on three levels:
  * Application Registration
  * User Setup/Configuration
  * Event Handling.

== Application Registration ==
In order for OmniDroid to handle events, it needs to have applications register with it.  This can either be a passive registration where OmniDroid has built-in support for a specific application, or active registration where an application is OmniAware and provides the necessary information to OmniDroid.

Application registration occurs at two times.  First when OmniDroid is first installed it will query the system for packages and try to register (both passively and actively) any applications which are OmniCompatible.  Secondly, when a new package is installed, OmniDroid will check to see if newly installed package is OmniCompatible and register it if possible.  When applications are registered with OmniDroid it populates the Application Configuration File.


== User Setup/Configuration ==
The user can customize OmniDroid by providing customized OmniHandlers and also by customizing the OmniDroid application settings.  Users can: create, edit, delete, enable, and disable OmniHandlers as the need arises.  Also there are many application settings that can be tweaked based on user preference.  When users make changes to OmniHandlers or in the settings, it populates and updates the User Configuration File.


== Event Handling ==
Event handling is probably the most complex of the processing levels.  The data flow for event handling is seen below:
{{{
   ------------     ---------     --------     ---------     -----------
  | App Events |-->| Catcher |-->| Engine |-->| Thrower |-->|App Actions|
   ------------     ---------     --------     ---------     -----------
}}}
Applications cause events.  OmniDroid catches these events using a Catcher based on what events have registered with OmniDroid.  The Catcher then hands this event off the Engine.  The engine then checks to see if the event matches a given OmniHandler set in the User Configuration File.  If it does, it then gathers the data needed based on the Application Configuration File in combination with the User Configuration File and hands this data over to the Thrower part of the application.  The Thrower then sends other applications the data they need to perform the action requested by the OmniHandler.

= CONFIG SPECIFICATIONS =

Subject to change, here are the Application and User Configuration specification examples:

== Sample Plain-Text AppCfg ==
{{{
  Application:SMS 
  PkgName:edu.nyu.cs.omnidroid
  ListenerClass:edu.nyu.cs.omnidroid.external.catcherapp.SMSListener
  EventName:SMS_RECEIVED,RECEIVED SMS 
  Filters:S_Name,S_Ph_No,Text,Location 
  EventName:SMS_SENT,SENT SMS 
  Filters:R_Name,R_Ph_no,Text 
  ActionName: SMS_SEND,SEND SMS 
  URIFields:R_NAME,R_Ph_No,Text 
  ContentMap: 
  S_Name,SENDER NAME,STRING 
  R_Name,RECEIVER NAME,STRING 
  S_Ph_No,SENDER PHONE NUMBER,INT 
  R_Ph_No,RECEIVER PHONE NUMBER,INT 
  Text,Text,STRING 
  Location,SMS Number,INT
}}}

== Sample Plain-Text UsrCfg ==
{{{
  Enabled:True
  InstanceName:SMS_Email
  EventName:SMS_RECEIVED  
  EventApp:SMS 
  FilterType:S_PhoneNum
  FilterData:212-555-1234
  AvtionName:SEND_EMAIL
  ActionApp:EMAIL /*One Event will have only one action. Make new record for another action.*/
  ActionData:ContentProvider_URI
  EnableInstance:True
}}}

= DEFINITIONS =

See [Glossary]